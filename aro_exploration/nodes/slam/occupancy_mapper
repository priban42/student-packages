#!/usr/bin/env python
"""Occupancy mapping node.

The node operates in 2D, Z coordinate of input points in the map frame is discarded.
"""
from typing import Optional

import numpy as np

import rospy
import tf2_ros
from geometry_msgs.msg import TransformStamped
from nav_msgs.msg import OccupancyGrid
from ros_numpy import numpify
from sensor_msgs.msg import PointCloud2, CameraInfo
from tf2_py import TransformException

from aro_slam.clouds import position, transform, viewpoint
from aro_slam.occupancy import OccupancyMap
from aro_slam.utils import timer, timing


class OccupancyMapper:
    def __init__(self):
        self.sensor_frame: Optional[str] = rospy.get_param('~sensor_frame', None)
        """Sensor frame is needed to recover sensor origin for updating occupancy grid. If None or empty, the frame is
        autodetected from incoming scans. If specified, the cloud needs not be in the sensor frame and it will be
        transformed to this frame automatically."""

        self.map_frame: str = rospy.get_param('~map_frame', 'map')
        """Fixed map frame."""

        self.max_age = rospy.Duration(rospy.get_param('~max_age', 0.25))
        """Throw away scans older than this threshold [s]."""

        self.timeout = rospy.Duration(rospy.get_param('~timeout', 0.25))
        """Timeout waiting for TF transforms [s]"""

        self.grid_res: float = rospy.get_param('~grid_res', 0.05)
        """Occupancy grid resolution [m]."""

        self.empty_update: float = rospy.get_param('~empty_update', -1.0)
        """Additive update for seeing through the cell."""

        self.occupied_update: float = rospy.get_param('~occupied_update', 1.0)
        """Additive update for hitting the cell."""

        self.min_occupancy: float = rospy.get_param('~min_occupancy', -10.0)
        """Minimum accumulated occupancy value. Lower values are clipped at this value. Avoids overconfident belief in
        any cell being free."""

        self.max_occupancy: float = rospy.get_param('~max_occupancy', 10.0)
        """Maximum accumulated occupancy value. Higher values are clipped at this value. Avoids overconfident belief in
        any cell being occupied."""

        self.occupied_threshold: float = rospy.get_param('~occupied_threshold', 5.0)
        """Threshold above which the cell is considered occupied."""

        self.last_update_stamp: Optional[rospy.Time] = None
        """The time of previous map update."""

        self.occupancy = OccupancyMap(self.map_frame, self.grid_res, self.empty_update, self.occupied_update,
                                      self.min_occupancy, self.max_occupancy, self.occupied_threshold)
        """Occupancy grid for planning and noise suppression."""

        self.visible_occupancy = OccupancyMap(self.map_frame, self.grid_res, self.empty_update, self.occupied_update,
                                              self.min_occupancy, self.max_occupancy, self.occupied_threshold)
        """Occupancy grid built from parts of the point clouds visible inside of camera FOV."""

        self.tf = tf2_ros.Buffer()
        self.tf_sub = tf2_ros.TransformListener(self.tf)

        self.occ_pub = rospy.Publisher('occupancy', OccupancyGrid, queue_size=5, latch=True)
        self.vis_occ_pub = rospy.Publisher('visible_occupancy', OccupancyGrid, queue_size=5, latch=True)

        self.camera_info: Optional[CameraInfo] = None
        self.caminfo_sub = rospy.Subscriber('camera_info', CameraInfo, self.process_caminfo, queue_size=1)

        self.points_sub = rospy.Subscriber('cloud', PointCloud2, self.process_cloud, queue_size=5)

    def process_caminfo(self, msg: CameraInfo) -> None:
        self.camera_info = msg
        rospy.loginfo('Got camera intirinsics matrix')
        self.caminfo_sub.unregister()

    @timing
    def get_camera_fov_mask(
            self, msg: PointCloud2, min_dist: Optional[float] = None, max_dist: Optional[float] = None) -> np.ndarray:
        """Compute a mask of the input pointclouds to select only points in camera FOV and not too far.
        :param msg: The input pointcloud.
        :param min_dist: Minimum distance from camera.
        :param max_dist: Maximum distance from camera.
        :return: The mask of `msg`. Numpy bool array N.
        """
        x_struct: np.ndarray = numpify(msg)

        if self.camera_info is None:
            rospy.logwarn_throttle(5.0, 'Camera info has not yet been received. Can not publish FOV cloud.')
            return np.ones_like(x_struct, dtype=bool)

        try:
            to_camera: TransformStamped = self.tf.lookup_transform(
                self.camera_info.header.frame_id, msg.header.frame_id, msg.header.stamp, self.timeout)
            to_camera: np.ndarray = numpify(to_camera.transform)
        except TransformException as ex:
            rospy.logwarn_throttle(
                5.0, 'Could not transform cloud in %s to map frame %s: %s.', msg.header.frame_id, self.map_frame, ex)
            return np.ones_like(x_struct, dtype=bool)

        x_struct = transform(to_camera, x_struct)
        x = position(x_struct)
        assert x.ndim == 2
        assert x.shape[1] == 3

        # clip points between MIN_DIST and MAX_DIST meters distance from the camera
        dist_mask = np.ones_like(x_struct, dtype=bool)
        dists = np.linalg.norm(x, axis=1)
        if min_dist:
            dist_mask = dists >= min_dist
        if max_dist:
            dist_mask = np.logical_and(dist_mask, dists <= max_dist)

        # find points that are observed by the camera (in its FOV)
        K = np.zeros((4, 4))
        K[0][0] = self.camera_info.K[0]
        K[0][2] = self.camera_info.K[2]
        K[1][1] = self.camera_info.K[4]
        K[1][2] = self.camera_info.K[5]
        K[2][2] = 1.
        K[3][3] = 1.

        pts_img = K[:3, :3] @ x.T
        pts_img[:2] /= pts_img[2:3]
        fov_mask = (pts_img[2] > 0) & \
                   (pts_img[0] > 1) & (pts_img[0] < self.camera_info.width - 1) & \
                   (pts_img[1] > 1) & (pts_img[1] < self.camera_info.height - 1)

        mask = np.logical_and(dist_mask, fov_mask)

        return mask

    @timing
    def process_cloud(self, msg):
        t0 = timer()
        assert isinstance(msg, PointCloud2)

        if msg.width * msg.height == 0:
            rospy.logwarn_throttle(5.0, 'Skipping an empty point cloud.')
            return

        age = rospy.Time.now() - msg.header.stamp
        if age > self.max_age:
            rospy.logwarn_throttle(
                5.0, 'Skipping message %.2f s old (older than %.2f s).' % (age.to_sec(), self.max_age.to_sec()))
            return

        try:
            to_map: TransformStamped = self.tf.lookup_transform(
                self.map_frame, msg.header.frame_id, msg.header.stamp, self.timeout)
            to_map: np.ndarray = numpify(to_map.transform)
        except TransformException as ex:
            rospy.logwarn_throttle(5.0, 'Could not transform cloud in %s to map frame %s: %s.',
                                   msg.header.frame_id, self.map_frame, ex)
            return

        x_struct: np.ndarray = numpify(msg)
        x_struct = transform(to_map, x_struct)

        # Update the occupancy grid from viewpoints to measured positions.
        x = position(x_struct)
        origin = viewpoint(x_struct)

        self.occupancy.update(origin.T, x.T, msg.header.stamp)
        if self.occ_pub.get_num_connections() > 0:
            self.occ_pub.publish(self.occupancy.to_msg())

        # Get occupancy grid in cameras FOV
        fov_mask = self.get_camera_fov_mask(msg)
        if fov_mask.sum() > 0:  # update FOV occupancy grid only if there are visible points
            self.visible_occupancy.update(origin[fov_mask].T, x[fov_mask].T, msg.header.stamp)
            if self.vis_occ_pub.get_num_connections() > 0:
                self.vis_occ_pub.publish(self.visible_occupancy.to_msg())

        rospy.loginfo('Occupancy map updated with %i measurements (%.3g s).',
                      x_struct.size, timer() - t0)


def main():
    rospy.init_node('occupancy_mapper', log_level=rospy.INFO)
    node = OccupancyMapper()
    rospy.spin()


if __name__ == '__main__':
    main()
